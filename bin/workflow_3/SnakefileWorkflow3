from itertools import product


# set configuration file
configfile: "configuration_w3.yaml"
# get place and time for the anlysis
PLACE = 'germany' if config['germany'] else 'europe'
TIME = config['time']
# gen combinations of y variables (y1, y2) for rule trendplot
Y1Y2 = [('new_deaths', 'new_cases'), ('new_deaths', 'new_vaccinations'), ('deaths_over_cases', 'new_vaccinations')]
# generate combinations Y1Y2-TIME-PLACE for rule trendplot
OUTPUTS_TRENDPLOT_COMBINATIONS =  list(product( [y1y2[0] for y1y2 in Y1Y2], [y1y2[1] for y1y2 in Y1Y2],
    [TIME], [PLACE]))
# gen outfile names:
ALL_OUTPUTS_TRENDPLOT = expand('../../results/workflow_3/trendplot_{y1}__{y2}_by_{place}_{time}.png', zip, 
               y1=[comb[0] for comb in OUTPUTS_TRENDPLOT_COMBINATIONS], 
               y2=[comb[1] for comb in OUTPUTS_TRENDPLOT_COMBINATIONS],
               time=[comb[2] for comb in OUTPUTS_TRENDPLOT_COMBINATIONS],
               place=[comb[3] for comb in OUTPUTS_TRENDPLOT_COMBINATIONS])
OUTPUT_DATAPROCESSING_W3 = expand('../../data/owid-covid-data_processed_w3_{place}_by_{time}.csv', place=PLACE, time=TIME)
OUTPUT_REGPLOT = expand('../../results/workflow_3/regplot_deaths_over_cases_vaccinations_by_{time}_{place}.png', place=PLACE, time=TIME)
ALL_OUTPUTS_CORRTEST = expand('../../results/workflow_3/correlationtest_results_{significance}_by_{time}_{place}.txt', place=PLACE,  time=TIME,
significance =['', '_significance'])


def corrtest_significance(file):
    """Helper function for rule regplot.
    The function reads file, that
    contains either 'True' (= significant correlation hp test results/workflow_3
    and regplot is produced) or 'False', and returns the corresponding boolean value.
    params:
        file (str): .txt filename
    
    Returns:
        bool.
        """
    with open(file, "r") as file:
        result = file.read()
    if (result == 'True'):
        return True
    else:
        return False


rule clean:
# windows:
    shell: 'del  ..\\..\\results\\workflow_3\\*.png ..\\..\\results\\workflow_3\\*.txt  ..\\..\\data\\*_processed*.csv'
# linux:
    # shell: 'rm -f  ..\..\results/workflow_3\{*.png,*.txt}  ..\..\data\{*_processed*.csv}'


rule all:
    input:
        '../../data/owid-covid-data_processed.csv',
        OUTPUT_DATAPROCESSING_W3,
        ALL_OUTPUTS_CORRTEST,
        OUTPUT_REGPLOT,
        ALL_OUTPUTS_TRENDPLOT


rule dataprocessing:
    input:
        cmd='../dataprocessing.py',
        csv= '../../data/owid-covid-data.csv'
    output: '../../data/owid-covid-data_processed.csv'
    shell:
        '''
        python {input.cmd} -i {input.csv} -o {output}
        '''


rule dataprocessing_w3:
    input:
        cmd='dataprocessing_w3.py',
        csv='../../data/owid-covid-data_processed.csv'
    output: OUTPUT_DATAPROCESSING_W3
    params: 
        time = TIME,
        germany = config['germany']
    shell: 
        '''
        python {input.cmd} -i {input.csv} -o {output} --time {params.time} --germany {params.germany}
        '''


rule corrtest:
    input:
        cmd='correlationtest_w3.py',
        csv= OUTPUT_DATAPROCESSING_W3
    output: ALL_OUTPUTS_CORRTEST
    params: 
        v1 = config['x'],
        v2 = config['y']
    shell:
        '''
        python {input.cmd} -i {input.csv} -o {output[0]} -v1 {params.v1} -v2 {params.v2} > {output[1]}
        '''


rule regplot:
    input:
        cmd='regressionplot_w3.py',
        csv= OUTPUT_DATAPROCESSING_W3,
        correalationtest_res=ALL_OUTPUTS_CORRTEST[1] 
    output: OUTPUT_REGPLOT
    params: 
        x = config['x'],
        y = config['y']
    run:
        if corrtest_significance(input.correalationtest_res):
            # proceed with plotting
            shell("python {input.cmd} -i {input.csv} -o {output} -x {params.x} -y {params.y}")
        else:
            # create empty .png
            shell("echo . > {output}")


rule trendplot:
    input:
        cmd='trendplot_w3.py',
        csv=OUTPUT_DATAPROCESSING_W3
    output: '../../results/workflow_3/trendplot_{y1}__{y2}_by_{place}_{time}.png'
    params: 
        time = TIME
    shell:
        '''
        python {input.cmd} -i {input.csv} -o {output} -y1 {wildcards.y1} -y2 {wildcards.y2} -x {params.time}
        '''

